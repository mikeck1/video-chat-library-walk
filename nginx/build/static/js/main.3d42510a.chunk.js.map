{"version":3,"sources":["Lobby.js","Participant.js","Room.js","VideoChat.js","ChatInput.js","ChatMessage.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["Lobby","username","handleUsernameChange","roomName","handleRoomNameChange","handleSubmit","onSubmit","htmlFor","type","id","value","onChange","required","Participant","participant","useState","videoTracks","setVideoTracks","audioTracks","setAudioTracks","videoRef","useRef","audioRef","trackpubsToTracks","trackMap","Array","from","values","map","publication","track","filter","useEffect","on","kind","v","a","removeAllListeners","videoTrack","attach","current","detach","audioTrack","className","identity","ref","autoPlay","Room","token","handleLogout","room","setRoom","participants","setParticipants","participantConnected","prevParticipants","participantDisconnected","p","Video","connect","name","then","forEach","currentRoom","localParticipant","state","tracks","trackPublication","stop","disconnect","remoteParticipants","key","sid","onClick","VideoChat","setUsername","setRoomName","setToken","useCallback","event","target","preventDefault","fetch","method","body","JSON","stringify","headers","res","json","data","ChatInput","message","action","e","props","onSubmitMessage","setState","placeholder","this","Component","URL","Chat","messages","ws","WebSocket","addMessage","submitMessage","messageString","send","onopen","console","log","onmessage","evt","parse","onclose","index","ChatMessage","App","Navbar","bg","variant","Brand","href","Toggle","Collapse","Text","style","backgroundColor","width","textAlign","top","position","role","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d42510a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Lobby = ({\n  username,\n  handleUsernameChange,\n  roomName,\n  handleRoomNameChange,\n  handleSubmit\n}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>Enter a room</h2>\n      <div>\n        <label htmlFor=\"name\">Name:</label>\n        <input\n          type=\"text\"\n          id=\"field\"\n          value={username}\n          onChange={handleUsernameChange}\n          required\n        />\n      </div>\n\n      <div>\n        <label htmlFor=\"room\">Room name:</label>\n        <input\n          type=\"text\"\n          id=\"room\"\n          value={roomName}\n          onChange={handleRoomNameChange}\n          required\n        /><br></br>\n        <button type=\"submit\">Submit</button>\n      </div>\n\n\n    </form>\n  );\n};\n\nexport default Lobby;\n","import React, { useState, useEffect, useRef } from 'react';\n\nconst Participant = ({ participant }) => {\n  const [videoTracks, setVideoTracks] = useState([]);\n  const [audioTracks, setAudioTracks] = useState([]);\n\n  const videoRef = useRef();\n  const audioRef = useRef();\n\n  const trackpubsToTracks = trackMap => Array.from(trackMap.values())\n    .map(publication => publication.track)\n    .filter(track => track !== null);\n\n  useEffect(() => {\n    setVideoTracks(trackpubsToTracks(participant.videoTracks));\n    setAudioTracks(trackpubsToTracks(participant.audioTracks));\n\n    const trackSubscribed = track => {\n      if (track.kind === 'video') {\n        setVideoTracks(videoTracks => [...videoTracks, track]);\n      } else {\n        setAudioTracks(audioTracks => [...audioTracks, track]);\n      }\n    };\n\n    const trackUnsubscribed = track => {\n      if (track.kind === 'video') {\n        setVideoTracks(videoTracks => videoTracks.filter(v => v !== track));\n      } else {\n        setAudioTracks(audioTracks => audioTracks.filter(a => a !== track));\n      }\n    };\n\n    participant.on('trackSubscribed', trackSubscribed);\n    participant.on('trackUnsubscribed', trackUnsubscribed);\n\n    return () => {\n      setVideoTracks([]);\n      setAudioTracks([]);\n      participant.removeAllListeners();\n    };\n  }, [participant]);\n\n  useEffect(() => {\n    const videoTrack = videoTracks[0];\n    if (videoTrack) {\n      videoTrack.attach(videoRef.current);\n      return () => {\n        videoTrack.detach();\n      };\n    }\n  }, [videoTracks]);\n\n  useEffect(() => {\n    const audioTrack = audioTracks[0];\n    if (audioTrack) {\n      audioTrack.attach(audioRef.current);\n      return () => {\n        audioTrack.detach();\n      };\n    }\n  }, [audioTracks]);\n\n  return (\n    <div className=\"participant\">\n      <h3>{participant.identity}</h3>\n      <video ref={videoRef} autoPlay={true} />\n      <audio ref={audioRef} autoPlay={true} />\n    </div>\n  );\n};\n\nexport default Participant;\n","import React, { useState, useEffect } from 'react';\nimport Video from 'twilio-video';\nimport Participant from './Participant';\n\nconst Room = ({ roomName, token, handleLogout }) => {\n  const [room, setRoom] = useState(null);\n  const [participants, setParticipants] = useState([]);\n\n  useEffect(() => {\n    const participantConnected = participant => {\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\n    };\n\n    const participantDisconnected = participant => {\n      setParticipants(prevParticipants =>\n        prevParticipants.filter(p => p !== participant)\n      );\n    };\n\n    Video.connect(token, {\n      name: roomName\n    }).then(room => {\n      setRoom(room);\n      room.on('participantConnected', participantConnected);\n      room.on('participantDisconnected', participantDisconnected);\n      room.participants.forEach(participantConnected);\n    });\n\n    return () => {\n      setRoom(currentRoom => {\n        if (currentRoom && currentRoom.localParticipant.state === 'connected') {\n          currentRoom.localParticipant.tracks.forEach(function(trackPublication) {\n            trackPublication.track.stop();\n          });\n          currentRoom.disconnect();\n          return null;\n        } else {\n          return currentRoom;\n        }\n      });\n    };\n  }, [roomName, token]);\n\n  const remoteParticipants = participants.map(participant => (\n    <Participant key={participant.sid} participant={participant} />\n  ));\n\n  return (\n    <div className=\"room\">\n      <h2>Room: {roomName}</h2>\n      <button onClick={handleLogout}>Log out</button>\n      <div className=\"local-participant\">\n        {room ? (\n          <Participant\n            key={room.localParticipant.sid}\n            participant={room.localParticipant}\n          />\n        ) : (\n          ''\n        )}\n      </div>\n      <h3>Remote Participants</h3>\n      <div className=\"remote-participants\">{remoteParticipants}</div>\n    </div>\n  );\n};\n\nexport default Room;\n","import React, { useState, useCallback } from 'react';\nimport Lobby from './Lobby';\nimport Room from './Room';\n\nconst VideoChat = () => {\n  const [username, setUsername] = useState('');\n  const [roomName, setRoomName] = useState('');\n  const [token, setToken] = useState(null);\n\n  const handleUsernameChange = useCallback(event => {\n    setUsername(event.target.value);\n  }, []);\n\n  const handleRoomNameChange = useCallback(event => {\n    setRoomName(event.target.value);\n  }, []);\n\n  const handleSubmit = useCallback(\n    async event => {\n      event.preventDefault();\n      const data = await fetch('/api/video/token', {\n        method: 'POST',\n        body: JSON.stringify({\n          identity: username,\n          room: roomName\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => res.json());\n      setToken(data.token);\n    },\n    [roomName, username]\n  );\n\n  const handleLogout = useCallback(event => {\n    setToken(null);\n  }, []);\n\n  let render;\n  if (token) {\n    render = (\n      <Room roomName={roomName} token={token} handleLogout={handleLogout} />\n    );\n  } else {\n    render = (\n      <Lobby\n        username={username}\n        roomName={roomName}\n        handleUsernameChange={handleUsernameChange}\n        handleRoomNameChange={handleRoomNameChange}\n        handleSubmit={handleSubmit}\n      />\n    );\n  }\n  return render;\n};\n\nexport default VideoChat;\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass ChatInput extends Component {\n  static propTypes = {\n    onSubmitMessage: PropTypes.func.isRequired,\n  }\n  state = {\n    message: '',\n  }\n\n  render() {\n    return (\n      <form\n        action=\".\"\n        onSubmit={e => {\n          e.preventDefault()\n          this.props.onSubmitMessage(this.state.message)\n          this.setState({ message: '' })\n        }}\n      >\n        <input\n          type=\"text\"\n          placeholder={'Enter message...'}\n          value={this.state.message}\n          onChange={e => this.setState({ message: e.target.value })}\n        />\n        <input type=\"submit\" value={'Send'} />\n      </form>\n    )\n  }\n}\n\nexport default ChatInput\n","import React from 'react'\n\nexport default ({ name, message }) =>\n  <p>\n    <strong>{name}</strong> <em>{message}</em>\n  </p>\n","import React, { Component } from 'react'\nimport ChatInput from './ChatInput'\nimport ChatMessage from './ChatMessage'\n\nconst URL = 'ws://localhost:3030'\n\nclass Chat extends Component {\n  state = {\n    name: 'Bob',\n    messages: [],\n  }\n\n  ws = new WebSocket(URL)\n\n  componentDidMount() {\n    this.ws.onopen = () => {\n      // on connecting, do nothing but log it to the console\n      console.log('connected')\n    }\n\n    this.ws.onmessage = evt => {\n      // on receiving a message, add it to the list of messages\n      const message = JSON.parse(evt.data)\n      this.addMessage(message)\n    }\n\n    this.ws.onclose = () => {\n      console.log('disconnected')\n      // automatically try to reconnect on connection loss\n      this.setState({\n        ws: new WebSocket(URL),\n      })\n    }\n  }\n\n  addMessage = message =>\n    this.setState(state => ({ messages: [message, ...state.messages] }))\n\n  submitMessage = messageString => {\n    // on submitting the ChatInput form, send the message, add it to the list and reset the input\n    const message = { name: this.state.name, message: messageString }\n    this.ws.send(JSON.stringify(message))\n    this.addMessage(message)\n  }\n\n  render() {\n    return (\n      <div>\n        <label htmlFor=\"name\">\n          Name:&nbsp;\n          <input\n            type=\"text\"\n            id={'name'}\n            placeholder={'Enter your name...'}\n            value={this.state.name}\n            onChange={e => this.setState({ name: e.target.value })}\n          />\n        </label>\n        <ChatInput\n          ws={this.ws}\n          onSubmitMessage={messageString => this.submitMessage(messageString)}\n        />\n        {this.state.messages.map((message, index) =>\n          <ChatMessage\n            key={index}\n            message={message.message}\n            name={message.name}\n          />,\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Chat\n","import React from 'react';\nimport './App.css';\nimport VideoChat from './VideoChat';\nimport Chat from './Chat';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import { Alert } from 'react-bootstrap';\nimport { Alert, Navbar } from 'react-bootstrap'\nconst App = () => {\n  return (\n\n    <div className=\"app\">\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Library Walk</Navbar.Brand>\n        <Navbar.Toggle />\n        <Navbar.Collapse className=\"justify-content-end\">\n          <Navbar.Text>\n            Signed in as: <a href=\"#login\">Mark Otto</a>\n          </Navbar.Text>\n        </Navbar.Collapse>\n      </Navbar>\n      <main>\n        <div style={{ backgroundColor: \"lightblue\", width: \"100%\", textAlign: \"center\", top: 0, position: \"relative\" }}>\n          <VideoChat />\n          <Chat />\n          {/* make a new project with redux for state management */}\n        </div>\n      </main>\n      <footer>\n        <p>\n          Made with{' '}\n          <span role=\"img\" aria-label=\"React\">\n            ⚛️\n          </span>{' '}\n          by M^3 and C\n        </p>\n      </footer>\n    </div >\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}